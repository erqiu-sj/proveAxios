import { dynamicPluginConfig, moduleConfiguration, decisionInstaller, mergeErrorInstaller, checkDynamicModuleSuccessInstallType, interceptorCollectionTypes, installerCollectionTypes } from '../types';
import { priority } from '../constants';
export declare function setDynamicPlugin(target: Object, conf: dynamicPluginConfig<object>): void;
export declare function getDynamicPluginConfig(target: Object): dynamicPluginConfig<object>;
export declare function verifyDynamicPlugin(target: Object, index: number): void;
export declare function isCustomPriorityPlugin(target: Object): boolean;
export declare function customPrioritySorting(tagetList: object[]): void;
export declare function builtinPrioritySorting(tagetList: object[]): void;
export declare function checkPrevisPriorityList(list: object[], type: keyof typeof priority, target: object[]): void;
export declare function mergePriorityList(customPriority: object[], selfPriority: object[]): object[];
export declare function setModuleConfig(target: Object, config: moduleConfiguration): void;
export declare function getModuleConfig(target: Object): moduleConfiguration;
export declare function getTargetInstaller(target: Object): dynamicPluginConfig<object>['installer'];
export declare function bindingSuccessInstaller<T extends decisionInstaller.installReqSuc | decisionInstaller.installResSuc, C extends object>(target: Object, type: T, fn: checkDynamicModuleSuccessInstallType<T, C>): void;
export declare function bindingErrorInstaller(target: Object, type: decisionInstaller.installReqFail | decisionInstaller.installResFail, fn: mergeErrorInstaller): void;
export declare function checkInterceptorCorrespondingInstaller(interceptor: interceptorCollectionTypes | undefined, installer: installerCollectionTypes<object> | undefined): boolean;
